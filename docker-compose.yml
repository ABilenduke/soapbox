version: '3'
services:

  #PHP Service
  php_fpm_app:
    build:
      context: .
      dockerfile: php.Dockerfile
      args:
        APPLICATION_ENVIRONMENT: ${APP_ENV}
    image: soapbox_php_fpm
    container_name: php_fpm_app
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
    working_dir: /var/www/html
    networks:
      - backend-network
    volumes:
       - .:/var/www/html:cached
       - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini

  #Node Service
  node_app:
    build:
      context: .
      dockerfile: node.Dockerfile
    image: soapbox_node_app
    container_name: node_app
    restart: unless-stopped
    tty: true
    working_dir: /var/www/html
    networks:
      - frontend-network
    volumes:
       - .:/var/www/html:cached
       - app_node_modules:/var/www/html/node_modules:cached

  #Nginx Service
  webserver:
    image: nginx:alpine
    container_name: webserver
    restart: unless-stopped
    tty: true
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - php_fpm_app
      - node_app
    networks:
      - frontend-network
      - backend-network
    volumes:
      - ./:/var/www/html:cached
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/conf.d/production/:/etc/nginx/conf.d/
      - ./nginx/log/:/var/log/nginx

  #MySQL Service
  mysql_db:
    image: mysql:5.7
    container_name: mysql_db
    restart: unless-stopped
    tty: true
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      SERVICE_TAGS: 'dev'
      SERVICE_NAME: 'mysql'
    ports:
      - "3306:3306"
    volumes:
      - dbdata:/var/lib/mysql
      - ./mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - backend-network

  redis:
    build: ./redis
    image: soapbox_redis
    container_name: redis
    restart: always
    volumes:
      - ./redis:/data
    ports:
      - "6379:6379"
    networks:
      - backend-network

#Docker Networks
networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge

#Volumes
volumes:
  dbdata:
    driver: local
  app_node_modules:
    driver: local
